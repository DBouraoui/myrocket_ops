/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export interface BearerResponse {
  access_token: string;
  token_type: string;
}

export type BodyAuthJwtLoginAuthJwtLoginPostGrantType = string | null;

export type BodyAuthJwtLoginAuthJwtLoginPostClientId = string | null;

export type BodyAuthJwtLoginAuthJwtLoginPostClientSecret = string | null;

export interface BodyAuthJwtLoginAuthJwtLoginPost {
  grant_type?: BodyAuthJwtLoginAuthJwtLoginPostGrantType;
  username: string;
  password: string;
  scope?: string;
  client_id?: BodyAuthJwtLoginAuthJwtLoginPostClientId;
  client_secret?: BodyAuthJwtLoginAuthJwtLoginPostClientSecret;
}

export interface BodyResetForgotPasswordAuthForgotPasswordPost {
  email: string;
}

export interface BodyResetResetPasswordAuthResetPasswordPost {
  token: string;
  password: string;
}

export interface BodyVerifyRequestTokenAuthRequestVerifyTokenPost {
  email: string;
}

export interface BodyVerifyVerifyAuthVerifyPost {
  token: string;
}

export type ErrorModelDetailAnyOf = {[key: string]: string};

export type ErrorModelDetail = string | ErrorModelDetailAnyOf;

export interface ErrorModel {
  detail: ErrorModelDetail;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type UserCreateIsActive = boolean | null;

export type UserCreateIsSuperuser = boolean | null;

export type UserCreateIsVerified = boolean | null;

export interface UserCreate {
  email: string;
  password: string;
  is_active?: UserCreateIsActive;
  is_superuser?: UserCreateIsSuperuser;
  is_verified?: UserCreateIsVerified;
}

export interface UserRead {
  id: string;
  email: string;
  is_active?: boolean;
  is_superuser?: boolean;
  is_verified?: boolean;
}

export type UserUpdatePassword = string | null;

export type UserUpdateEmail = string | null;

export type UserUpdateIsActive = boolean | null;

export type UserUpdateIsSuperuser = boolean | null;

export type UserUpdateIsVerified = boolean | null;

export interface UserUpdate {
  password?: UserUpdatePassword;
  email?: UserUpdateEmail;
  is_active?: UserUpdateIsActive;
  is_superuser?: UserUpdateIsSuperuser;
  is_verified?: UserUpdateIsVerified;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

/**
 * @summary Auth:Jwt.Login
 */
export const authJwtLoginAuthJwtLoginPost = <TData = AxiosResponse<BearerResponse>>(
    bodyAuthJwtLoginAuthJwtLoginPost: BodyAuthJwtLoginAuthJwtLoginPost, options?: AxiosRequestConfig
): Promise<TData> => {const formUrlEncoded = new URLSearchParams();
if(bodyAuthJwtLoginAuthJwtLoginPost.grant_type !== undefined && bodyAuthJwtLoginAuthJwtLoginPost.grant_type !== null) {
 formUrlEncoded.append(`grant_type`, bodyAuthJwtLoginAuthJwtLoginPost.grant_type)
 }
formUrlEncoded.append(`username`, bodyAuthJwtLoginAuthJwtLoginPost.username)
formUrlEncoded.append(`password`, bodyAuthJwtLoginAuthJwtLoginPost.password)
if(bodyAuthJwtLoginAuthJwtLoginPost.scope !== undefined) {
 formUrlEncoded.append(`scope`, bodyAuthJwtLoginAuthJwtLoginPost.scope)
 }
if(bodyAuthJwtLoginAuthJwtLoginPost.client_id !== undefined && bodyAuthJwtLoginAuthJwtLoginPost.client_id !== null) {
 formUrlEncoded.append(`client_id`, bodyAuthJwtLoginAuthJwtLoginPost.client_id)
 }
if(bodyAuthJwtLoginAuthJwtLoginPost.client_secret !== undefined && bodyAuthJwtLoginAuthJwtLoginPost.client_secret !== null) {
 formUrlEncoded.append(`client_secret`, bodyAuthJwtLoginAuthJwtLoginPost.client_secret)
 }

    return axios.default.post(
      `/auth/jwt/login`,
      formUrlEncoded,options
    );
  }

/**
 * @summary Auth:Jwt.Logout
 */
export const authJwtLogoutAuthJwtLogoutPost = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/jwt/logout`,undefined,options
    );
  }

/**
 * @summary Register:Register
 */
export const registerRegisterAuthRegisterPost = <TData = AxiosResponse<UserRead>>(
    userCreate: UserCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/register`,
      userCreate,options
    );
  }

/**
 * @summary Reset:Forgot Password
 */
export const resetForgotPasswordAuthForgotPasswordPost = <TData = AxiosResponse<unknown>>(
    bodyResetForgotPasswordAuthForgotPasswordPost: BodyResetForgotPasswordAuthForgotPasswordPost, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/forgot-password`,
      bodyResetForgotPasswordAuthForgotPasswordPost,options
    );
  }

/**
 * @summary Reset:Reset Password
 */
export const resetResetPasswordAuthResetPasswordPost = <TData = AxiosResponse<unknown>>(
    bodyResetResetPasswordAuthResetPasswordPost: BodyResetResetPasswordAuthResetPasswordPost, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/reset-password`,
      bodyResetResetPasswordAuthResetPasswordPost,options
    );
  }

/**
 * @summary Verify:Request-Token
 */
export const verifyRequestTokenAuthRequestVerifyTokenPost = <TData = AxiosResponse<unknown>>(
    bodyVerifyRequestTokenAuthRequestVerifyTokenPost: BodyVerifyRequestTokenAuthRequestVerifyTokenPost, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/request-verify-token`,
      bodyVerifyRequestTokenAuthRequestVerifyTokenPost,options
    );
  }

/**
 * @summary Verify:Verify
 */
export const verifyVerifyAuthVerifyPost = <TData = AxiosResponse<UserRead>>(
    bodyVerifyVerifyAuthVerifyPost: BodyVerifyVerifyAuthVerifyPost, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/auth/verify`,
      bodyVerifyVerifyAuthVerifyPost,options
    );
  }

/**
 * @summary Users:Current User
 */
export const usersCurrentUserUsersMeGet = <TData = AxiosResponse<UserRead>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/users/me`,options
    );
  }

/**
 * @summary Users:Patch Current User
 */
export const usersPatchCurrentUserUsersMePatch = <TData = AxiosResponse<UserRead>>(
    userUpdate: UserUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/users/me`,
      userUpdate,options
    );
  }

/**
 * @summary Users:User
 */
export const usersUserUsersIdGet = <TData = AxiosResponse<UserRead>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/users/${id}`,options
    );
  }

/**
 * @summary Users:Patch User
 */
export const usersPatchUserUsersIdPatch = <TData = AxiosResponse<UserRead>>(
    id: string,
    userUpdate: UserUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/users/${id}`,
      userUpdate,options
    );
  }

/**
 * @summary Users:Delete User
 */
export const usersDeleteUserUsersIdDelete = <TData = AxiosResponse<null>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/users/${id}`,options
    ).then((res) => {if (res.data === "") res.data = null; return res as TData;});
  }

/**
 * @summary Authenticated Route
 */
export const authenticatedRouteAuthenticatedRouteGet = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/authenticated-route`,options
    );
  }

export type AuthJwtLoginAuthJwtLoginPostResult = AxiosResponse<BearerResponse>
export type AuthJwtLogoutAuthJwtLogoutPostResult = AxiosResponse<unknown>
export type RegisterRegisterAuthRegisterPostResult = AxiosResponse<UserRead>
export type ResetForgotPasswordAuthForgotPasswordPostResult = AxiosResponse<unknown>
export type ResetResetPasswordAuthResetPasswordPostResult = AxiosResponse<unknown>
export type VerifyRequestTokenAuthRequestVerifyTokenPostResult = AxiosResponse<unknown>
export type VerifyVerifyAuthVerifyPostResult = AxiosResponse<UserRead>
export type UsersCurrentUserUsersMeGetResult = AxiosResponse<UserRead>
export type UsersPatchCurrentUserUsersMePatchResult = AxiosResponse<UserRead>
export type UsersUserUsersIdGetResult = AxiosResponse<UserRead>
export type UsersPatchUserUsersIdPatchResult = AxiosResponse<UserRead>
export type UsersDeleteUserUsersIdDeleteResult = AxiosResponse<null>
export type AuthenticatedRouteAuthenticatedRouteGetResult = AxiosResponse<unknown>
