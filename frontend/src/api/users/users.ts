/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorModel,
  HTTPValidationError,
  UserRead,
  UserUpdate
} from '../generated.schemas';

import { apiClient } from '../../lib/axios';




/**
 * @summary Users:Current User
 */
export const usersCurrentUserUsersMeGet = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserRead>(
      {url: `/users/me`, method: 'GET', signal
    },
      );
    }
  

export const getUsersCurrentUserUsersMeGetQueryKey = () => {
    return [`/users/me`] as const;
    }

    
export const getUsersCurrentUserUsersMeGetQueryOptions = <TData = Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>, TError = null>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersCurrentUserUsersMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>> = ({ signal }) => usersCurrentUserUsersMeGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersCurrentUserUsersMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>>
export type UsersCurrentUserUsersMeGetQueryError = null


export function useUsersCurrentUserUsersMeGet<TData = Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>, TError = null>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>,
          TError,
          Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersCurrentUserUsersMeGet<TData = Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>,
          TError,
          Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersCurrentUserUsersMeGet<TData = Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Users:Current User
 */

export function useUsersCurrentUserUsersMeGet<TData = Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserUsersMeGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersCurrentUserUsersMeGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Users:Patch Current User
 */
export const usersPatchCurrentUserUsersMePatch = (
    userUpdate: UserUpdate,
 ) => {
      
      
      return apiClient<UserRead>(
      {url: `/users/me`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userUpdate
    },
      );
    }
  


export const getUsersPatchCurrentUserUsersMePatchMutationOptions = <TError = ErrorModel | null | HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPatchCurrentUserUsersMePatch>>, TError,{data: UserUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof usersPatchCurrentUserUsersMePatch>>, TError,{data: UserUpdate}, TContext> => {

const mutationKey = ['usersPatchCurrentUserUsersMePatch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersPatchCurrentUserUsersMePatch>>, {data: UserUpdate}> = (props) => {
          const {data} = props ?? {};

          return  usersPatchCurrentUserUsersMePatch(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersPatchCurrentUserUsersMePatchMutationResult = NonNullable<Awaited<ReturnType<typeof usersPatchCurrentUserUsersMePatch>>>
    export type UsersPatchCurrentUserUsersMePatchMutationBody = UserUpdate
    export type UsersPatchCurrentUserUsersMePatchMutationError = ErrorModel | null | HTTPValidationError

    /**
 * @summary Users:Patch Current User
 */
export const useUsersPatchCurrentUserUsersMePatch = <TError = ErrorModel | null | HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPatchCurrentUserUsersMePatch>>, TError,{data: UserUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersPatchCurrentUserUsersMePatch>>,
        TError,
        {data: UserUpdate},
        TContext
      > => {

      const mutationOptions = getUsersPatchCurrentUserUsersMePatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Users:User
 */
export const usersUserUsersIdGet = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserRead>(
      {url: `/users/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getUsersUserUsersIdGetQueryKey = (id?: string,) => {
    return [`/users/${id}`] as const;
    }

    
export const getUsersUserUsersIdGetQueryOptions = <TData = Awaited<ReturnType<typeof usersUserUsersIdGet>>, TError = null | null | null | HTTPValidationError>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersUserUsersIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersUserUsersIdGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersUserUsersIdGet>>> = ({ signal }) => usersUserUsersIdGet(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersUserUsersIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersUserUsersIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof usersUserUsersIdGet>>>
export type UsersUserUsersIdGetQueryError = null | null | null | HTTPValidationError


export function useUsersUserUsersIdGet<TData = Awaited<ReturnType<typeof usersUserUsersIdGet>>, TError = null | null | null | HTTPValidationError>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersUserUsersIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersUserUsersIdGet>>,
          TError,
          Awaited<ReturnType<typeof usersUserUsersIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersUserUsersIdGet<TData = Awaited<ReturnType<typeof usersUserUsersIdGet>>, TError = null | null | null | HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersUserUsersIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersUserUsersIdGet>>,
          TError,
          Awaited<ReturnType<typeof usersUserUsersIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersUserUsersIdGet<TData = Awaited<ReturnType<typeof usersUserUsersIdGet>>, TError = null | null | null | HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersUserUsersIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Users:User
 */

export function useUsersUserUsersIdGet<TData = Awaited<ReturnType<typeof usersUserUsersIdGet>>, TError = null | null | null | HTTPValidationError>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersUserUsersIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersUserUsersIdGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Users:Patch User
 */
export const usersPatchUserUsersIdPatch = (
    id: string,
    userUpdate: UserUpdate,
 ) => {
      
      
      return apiClient<UserRead>(
      {url: `/users/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userUpdate
    },
      );
    }
  


export const getUsersPatchUserUsersIdPatchMutationOptions = <TError = ErrorModel | null | null | null | HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPatchUserUsersIdPatch>>, TError,{id: string;data: UserUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof usersPatchUserUsersIdPatch>>, TError,{id: string;data: UserUpdate}, TContext> => {

const mutationKey = ['usersPatchUserUsersIdPatch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersPatchUserUsersIdPatch>>, {id: string;data: UserUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  usersPatchUserUsersIdPatch(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersPatchUserUsersIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof usersPatchUserUsersIdPatch>>>
    export type UsersPatchUserUsersIdPatchMutationBody = UserUpdate
    export type UsersPatchUserUsersIdPatchMutationError = ErrorModel | null | null | null | HTTPValidationError

    /**
 * @summary Users:Patch User
 */
export const useUsersPatchUserUsersIdPatch = <TError = ErrorModel | null | null | null | HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPatchUserUsersIdPatch>>, TError,{id: string;data: UserUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersPatchUserUsersIdPatch>>,
        TError,
        {id: string;data: UserUpdate},
        TContext
      > => {

      const mutationOptions = getUsersPatchUserUsersIdPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Users:Delete User
 */
export const usersDeleteUserUsersIdDelete = (
    id: string,
 ) => {
      
      
      return apiClient<null>(
      {url: `/users/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getUsersDeleteUserUsersIdDeleteMutationOptions = <TError = null | null | null | HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersDeleteUserUsersIdDelete>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof usersDeleteUserUsersIdDelete>>, TError,{id: string}, TContext> => {

const mutationKey = ['usersDeleteUserUsersIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersDeleteUserUsersIdDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  usersDeleteUserUsersIdDelete(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersDeleteUserUsersIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof usersDeleteUserUsersIdDelete>>>
    
    export type UsersDeleteUserUsersIdDeleteMutationError = null | null | null | HTTPValidationError

    /**
 * @summary Users:Delete User
 */
export const useUsersDeleteUserUsersIdDelete = <TError = null | null | null | HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersDeleteUserUsersIdDelete>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersDeleteUserUsersIdDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getUsersDeleteUserUsersIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    